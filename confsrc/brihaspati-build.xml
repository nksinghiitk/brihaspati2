<?xml version="1.0"?>

<!-- Build file for creating new applications with Turbine -->

<project name="TDK" default="application" basedir=".">

  <property file="${user.home}/brihasapti-build.properties"/>
  <property file="brihaspati-build.properties"/>

  <!-- Do not edit these values -->
  <property name="tdk.turbineVersion" value="2"/>
  <property name="app.src" value="tdk/apps/${tdk.turbineVersion}"/>
  <property name="ancillary.dir" value="tdk/ancillary"/>

  <!-- ================================================================ -->
  <!-- S E T U P  T A R G E T                                           -->
  <!-- ================================================================ -->
  <!-- Check that properties are defined correctly.                     -->
  <!-- ================================================================ -->
  <target name="setup"
          unless="tdk.home">
    <echo>
      ***
      * ERROR : The 'tdk.home' property is not defined or
      * is pointing to an invalid directory.
      *
      * In your personal build.properties define tdk.home to
      * point to an absolute path where your tdk is installed.
      * Example: tdk.home=${user.home}/tdk
      ***
    </echo>
    <fail message="ERROR: tdk.home not defined properly: ${tdk.home}"/>
  </target>

  <!-- =================================================================== -->
  <!-- P R O P E R T I E S                                                 -->
  <!-- =================================================================== -->
  <target name="properties">
    <property file="tdk/build-classic.properties"/>
  </target>

  <!-- =================================================================== -->
  <!-- C V S L A Y O U T                                                   -->
  <!-- =================================================================== -->
  <target name="cvslayout"
          depends="setup,cvslayout-properties"
          description="--> cvslayout setup">
    <antcall target="build-base"/>
    <antcall target="name-project-conf-files"/>
    <antcall target="turbine-resources"/>
    <antcall target="message"/>
    <antcall target="setup-webinf"/>
  </target>

  <!-- =================================================================== -->
  <!-- C V S L A Y O U T   P R O P E R T I E S                             -->
  <!-- =================================================================== -->
  <target name="cvslayout-properties">
    <property file="tdk/build-cvslayout.properties"/>
  </target>

  <!-- =================================================================== -->
  <!-- B U I L D   B A S E                                                 -->
  <!-- =================================================================== -->
  <target name="build-base">
    <antcall target="application-template"/>
  </target>

  <!-- =================================================================== -->
  <!-- S A M P L E  A P P L I C A T I O N                                  -->
  <!-- =================================================================== -->
  <target name="application"
          depends="setup,properties"
          description="--> application setup">
    <antcall target="wbapcret"/>
    <antcall target="untar"/>
    <antcall target="build-base"/>
    <antcall target="adjust-for-classic"/>
    <!-- antcall target="name-project-conf-files"/ -->
    <antcall target="turbine-resources"/>
    <antcall target="torque-resources"/>
    <antcall target="message"/>
    <antcall target="setup-webinf"/>
</target>

  <target name="wbapcret">
	<mkdir dir="${tdk.home}/webapps"/>
  </target>
  
  <target name="untar">
	<gunzip src="brihaspati2.tar.gz"/>
	<untar src="brihaspati2.tar" dest="${tdk.home}/webapps/"/>
  </target>
  
  <target name="setup-webinf">
    <mkdir dir="${tdk.home}/webapps/${tdk.project}/WEB-INF/db"/>
    <mkdir dir="${tdk.home}/webapps/${tdk.project}/WEB-INF/classes"/>
    <antcall target="deployment-descriptor"/>
  </target>

  <target name="adjust-for-classic">

    <!-- Now we have to make some adjustments to  the database password 
	 in build.properties and torque.properties -->



  </target>

  <target name="message">
    <!-- =================================================================== -->
    <!-- Here we cannot just simply compile all the sources because          -->
    <!-- Torque must be run first in order to generate the peers. Just       -->
    <!-- give the user some instructions on what to do next :-)              -->
    <!-- =================================================================== -->

    <echo>

      There are few things that you must do before
      you can run the sample application. Everything
      will be done for you automatically, but you must
      change some properties for your project before
      your Java and SQL sources can be fully generated.

      Once you have made the necessary changes, you can
      then run an initialization target with the build script
      provided and the whole sample app will be setup for you!.

      Detailed instructions on how to precede are outlined
      in the GETTING_STARTED.txt located in the
      webapps/${tdk.project}/WEB-INF/build directory

    </echo>

  </target>



  <!-- ================================================================= -->
  <!-- A P P L I C A T I O N  T E M P L A T E                            -->
  <!-- ================================================================= -->

  <target name="application-template">

    <property file="${ancillary.dir}/torque/src/conf/database/${target.database}"/>

    <filter token="PROJECT" value="${tdk.project}"/>
    <filter token="TEMPLATE_PATH" value="${template.path}"/>
    <filter token="OUTPUT_DIRECTORY" value="${output.directory}"/>
    <filter token="SCHEMA_DIRECTORY" value="${schema.directory}"/>
    <filter token="TARGET_PACKAGE" value="${target.package}"/>
    <filter token="TARGET_DIRECTORY" value="${target.directory}"/>
    <filter token="MASTER_CONF_DIR" value="${master.conf.dir}"/>
    <filter token="BUILD_DEST" value="${build.dest}"/>
    <filter token="SRC_DIR" value="${src.dir}"/>
    <filter token="CONF_DIR" value="${conf.dir}"/>
    <filter token="TURBINE_VERSION" value="${tdk.turbineVersion}"/>

    <filter token="DATABASE" value="${target.database}"/>
    <filter token="DATABASE_DRIVER" value="${database.driver}"/>
    <filter token="DATABASE_URL" value="${databaseUrl}"/>
    <filter token="DATABASE_CREATE_URL" value="${createDatabaseUrl}"/>
    <filter token="DATABASE_BUILD_URL" value="${buildDatabaseUrl}"/>
    <filter token="DATABASE_USER" value="${databaseUser}"/>
    <filter token="DATABASE_PASSWORD" value="${databasePassword}"/>
    <filter token="DATABASE_HOST" value="${databaseHost}"/>
    <filter token="DATABASE_DEFAULT" value="${database.project}"/>

    <copy todir="${app.home}" filtering="yes">
      <fileset dir="${app.src}">
        <exclude name="**/images/**"/>
      </fileset>
    </copy>

    <!-- Images get whacked when copied with filtering
         so we must copy them separately. -->

    <copy todir="${app.home}">
      <fileset dir="${app.src}">
        <include name="**/images/**"/>
      </fileset>
    </copy>

    <!-- Now we have to replace the @TDK_HOME@ token with
         the literal string ${tdk.home}. We do not want the
         actual value placed into the build.properties file
         because what will be substituted is the value of
         tdk.home on the machine where the sample app was
         built and packaged. We obviously don't want this. -->

    <replace dir="${app.home}">
      <include name="**/brihaspati-build.properties"/>
      <replacetoken><![CDATA[@TDK_HOME@]]></replacetoken>
      <replacevalue><![CDATA[${tdk.home}]]></replacevalue>
    </replace>


  </target>

  <!-- ================================================================= -->
  <!-- T E S T  S O U R C E                                              -->
  <!-- ================================================================= -->

  <target name="test-source">
    <copy todir="${app.src}/test" filtering="yes">
      <fileset dir="${test.directory}"/>
    </copy>
  </target>

  <!-- ================================================================= -->
  <!-- D E P L O Y M E N T  D E S C R I P T O R                          -->
  <!-- ================================================================= -->

  <target name="deployment-descriptor">

    <filter token="PROJECT" value="${tdk.project}"/>
    <filter token="APP_ROOT" value="${app.root}"/>
    <filter token="APP_PROPERTIES" value="${app.properties}"/>

    <copy
      file="${ancillary.dir}/web.xml"
      tofile="${tdk.home}/webapps/${tdk.project}/WEB-INF/web.xml"
      overwrite="yes"
      filtering="yes"
    />

  </target>

  <!-- ================================================================= -->
  <!-- T U R B I N E  R E S O U R C E S  P R O P E R T I E S             -->
  <!-- ================================================================= -->
  <!-- This will dynamically generate the correct                        -->
  <!-- TurbineResources.properties file for this web                     -->
  <!-- application.                                                      -->
  <!-- ================================================================= -->

  <target name="turbine-resources">

    <property name="flux.modules" value="org.apache.turbine.flux.modules"/>

    <ant antfile="${ancillary.dir}/${tdk.turbineVersion}/src/conf/build.xml" target="tr-props-without-db-values">
      <property name="conf.home" value="${ancillary.dir}/${tdk.turbineVersion}/src/conf"/>
      <property name="master.home" value="${ancillary.dir}/${tdk.turbineVersion}/src/conf/master"/>
      <property name="target.dir" value="${abs.conf.dir}"/>
      <property name="copy" value="${abs.conf.dir}/TurbineResources.template"/>
      <property name="turbine.log" value="/logs/turbine.log"/>
      <property name="database.name" value="${database.project}"/>
      <property name="module.packages" value="${target.package}.modules,${flux.modules}"/>
      <property name="include.file" value="include = Flux.properties"/>
      <property name="template.path" value="/templates/app,/templates/flux"/>
      <property name="intake.descriptor" value="WEB-INF/conf/${tdk.project}-intake.xml"/>
    </ant>
  </target>

  <!-- ================================================================= -->
  <!-- T O R Q U E   R E S O U R C E S   P R O P E R T I E S             -->
  <!-- ================================================================= -->
  <!-- This will dynamically generate the correct  Torque.properties     -->
  <!-- file for this web application.                                    -->
  <!-- ================================================================= -->

  <target name="torque-resources">
    <copy file="${ancillary.dir}/torque/src/conf/master/Torque.master"
          tofile="${abs.conf.dir}/Torque.template"/>
    <copy file="${ancillary.dir}/torque/src/conf/build-torque.xml"
          tofile="${abs.conf.dir}/../build/build-torque.xml"/>
  </target>

</project>
